,Document,re
0, 운영체제 서비스 (Operating System Services),7
1, 운영체제 사용자 인터페이스 (User Operating System Interface),20
2, 시스템 콜 (System Calls),16
3, 시스템 콜 유형 (Types of System Calls),16
4, 시스템 프로그램 (System Programs),13
5, 운영체제 설계 및 구현 (Operating System Design and Implementation),20
6, 운영체제 구조 (Operating System Structure),9
7, 운영체제 디버깅 (Operating System Debugging),20
8, 운영체제 생성 (Operating System Generation),14
9, 시스템 부팅 (System Boot) ,6
10,목표 (Objectives),22
11," 운영체제가 사용자, 프로세스, 다른 시스템에 제공하는 서비스 설명",6
12, 운영체제를 구성하는 다양한 방법에 대해 논의,20
13," 운영체제 설치, 맞춤화 과정(customization), 부팅하는 방법",20
14,운영체제 서비스 : View,7
15, 운영체제는 사용자(또는 프로그램) 들에게 프로그램의 실행 환경을 제공한다  ,10
16, 사용자 프로그램의 적절한 실행과 시스템의 효율적 운용을 담당한다 ,6
17,운영체제 서비스 (Operating System Services)  ,7
18, 사용자 업무를 수행하는 데 필요한 기능을 제공하는 운영체제 서비스,20
19,사용자 인터페이스,11
20, 명령어 라인 인터페이스 (Command Line Interface)– 문자열 명령 입력,0
21, 배치 인터페이스 (Batch Interface)– 명령어 또는 명령어 집합을 파일로 제공,0
22,운영체제 서비스 (Operating System Services)  ,7
23, 사용자 업무를 수행하는 데 필요한 기능을 제공하는 운영체제 서비스,20
24,프로그램 실행 (Execution),10
25," 프로그램을 메모리에 적재, 실행, 실행 종료 (정상 또는 비정상)",10
26,입출력 연산 (I/O),1
27, 프로그램 실행에서 요구하는 파일 또는 입출력 장치 등의 입출력 서비스 ,0
28,운영체제 서비스 (Operating System Services)  ,7
29, 사용자 업무를 수행하는 데 필요한 기능을 제공하는 운영체제 서비스,20
30,파일 시스템,15
31, 파일과 디렉토리 생성과 삭제,15
32, 파일과 디렉토리 읽고 쓰기,15
33, 파일과 디렉토리 찾기,15
34, 파일 정보 보기,15
35, 파일 접근 권한 관리메시지 전달(Message Passing)공유 메모리(Shared Memory),0
36,통신,25
37, 동일한 컴퓨터 또는 네트워크로 연결된 컴퓨터에 있는 프로세스 간정보 교환,0
38, 통신은 메시지 전달 기법 (운영체제가 패킷을 이동하는데 관여함) 또는 공유 메모리를 이용 ,0
39,운영체제 서비스 (Operating System Services)  ,7
40, 사용자 업무를 수행하는 데 필요한 기능을 제공하는 운영체제 서비스,20
41,오류 탐지 (Error Detection),1
42, 운영체제는 가능한 모든 오류를 인지하고 있어야 함,20
43," 오류는 CPU, 메모리, 입출력 장치, 사용자 프로그램 등에서 발생 가능",0
44, 운영체제는 올바르고 일관된 계산을 보장하기 위해 각 타입의 오류에대해 올바른 조처를 취해야 한다 ,0
45, 디버깅 장치는 사용자와 개발자의 효율적인 시스템 사용을 향상시킬수 있다 ,6
46,운영체제 서비스 (Operating System Services)  ,7
47, 시스템 자원을 공유하여 시스템의 효율적인 운영을 보장하는 서비스,6
48,자원 할당(resource allocation),0
49," 다수의 사용자나 다수의 작업들이 동시에 실행될 때 각각에 자원을할당해야 함– 자원 종류 - CPU cycles, main memory, file storage, I/O devices ",0
50," 자원의 일부는 특별한 할당 코드를 가지며, 동일한 컴퓨터 또는네트워크로 연결된 컴퓨터에 있는 프로세스 간 정보 교환 가능",0
51,회계(accounting),23
52, 어떤 사용자가 어떤 자원을 얼만큼 쓰는지 기록하고 관리 ,0
53,운영체제 서비스 (Operating System Services)  ,7
54, 시스템 자원을 공유하여 시스템의 효율적인 운영을 보장하는 서비스,6
55,보호와 보안(protection and security),19
56, 보호는 시스템 자원에 대한 모든 접근이 통제되도록 보장하는 것,0
57, 외부(external)로부터 시스템 보안을 유지하기 위해 사용자 인증(User Authentication)이 필요하고 부적합한 접근(invalid access attempts)시도로부터 입출력 장치를 보호해야 한다 ,0
58, 시스템 전체에 예방책이 제정되어 한다 ,6
59,사용자 인터페이스 – CLI,11
60, 명령어 해석기 (Command interpreter),8
61,"CLI, 또는 명령어 해석기를 통해 명령어 직접 입력",0
62,커널 또는 시스템 프로그램으로 구현,6
63,"선택 가능한 여러 개의 명령어 해석기 (shells) 제공 – UNIX, Linux ",0
64,사용자 인터페이스 – CLI,11
65, 명령어 해석기 (Command interpreter),8
66,역할 : 사용자의 명령어를 가져와 그것을 실행한다 ,0
67, 명령어 해석기가 명령을 실행하는 코드를 포함하는 경우도 있음– 명령어 개수가 프로그램 크기를 결정,0
68, 시스템 프로그램으로 명령 구현 (UNIX)– 명령 해석기 프로그램 크기가 작아짐– 새로운 명령을 추가해도 셸을 변경시킬 필요가 없다 – 예 : rm file txt (p )명령해석기명령 명령 명령해석기명령 명령 ,0
69,사용자 인터페이스 – GUI,11
70, 사용자 친화적인 상징 인터페이스(metaphor interface),0
71,"마우스, 키보드와 모니터 사용",0
72,"아이콘이 파일, 프로그램, 액션 등을 표시",0
73,"인터페이스 내의 대상에 대한 다양한 마우스 버튼으로 다수의 행위가발생한다(정보 제공, 선택사항, 실행, 폴더 열기 등)",0
74, 년대 초 Xerox PARC 연구에서 시작,0
75, 많은 시스템은 CLI와 GUI 인터페이스를 모두 가지고 있다 ,6
76,Microsoft 윈도우는 CLI 명령어 셸을 가지고 있는 GUI이다 ,0
77,Apple Mac OS X는 UNIX 커널과 셸을 가지고 있는 Aqua GUI이다 ,0
78,"Unix와 Linux는 선택적인 GUI(CDE, KDE, GNOME)를 가진 CLI이다   ",0
79,터치스크린 인터페이스iPad touch screen,0
80, 터치스크린 디바이스는 새로운인터페이스가 필요,0
81,마우스 사용이 불가능하고바람직하지 않음,12
82,액션과 선택은 손동작에 근거,0
83,글자 입력을 위해 가상 키보드(Virtua,0
84,keyboard for text entry) 사용 Springboard,12
85,시스템 콜 (System Calls),16
86, 시스템 콜(호출)은 운영체제가 제공하는 서비스에 대한 인터페이스를사용자에게 제공한다,6
87, 일반적으로 고급 언어(C 또는 C++)로 작성된 루틴 형태로 제공,0
88, 대부분 직접적인 시스템 콜 사용보다는 고급의 Application Program Interface (API)를 통해 접근한다 ,6
89,사용자 프로그램 -> API 사용 -> 시스템콜 ,6
90,시스템 콜 (System Calls),16
91, 가장 많이 사용되는 APIs,12
92,윈도우의 Win  API,1
93,"POSIX API (모든 버전의 UNIX, Linux, and Mac OS X)lJava Virtua",0
94,Machine(JVM)의 Java APIPOSIX (portable operating system interface) : 이식 가능 운영 체제 인터페이스  서로 다른 UNIX OS의 공통 API를 정리 ,0
95, 이식성이 높은 유닉스 응용 프로그램을 개발하기 위한 목적 ,0
96, 파일의 내용을 다른 파일에 복사하는 시스템 콜의 순서(p ),6
97,sequence to copy the contents of one file to another file(UNIX cp 명령)cp in txt out txt ,24
98,시스템 콜 구현 (System Cal,16
99," 통상적으로, 각 시스템 콜에 대하여 숫자가 부여된다",0
100,시스템 콜 인터페이스가 이 숫자로 된 인덱스를 가진 테이블을 관리한다  ,6
101, 시스템 콜 인터페이스가,6
102,운영체제 커널 내에 있는 요청된 시스템 콜을 하고,6
103,시스템 콜의 반환 상태와 해당 반환 값을 반환한다   ,6
104,시스템 콜 구현 (System Cal,16
105, 개발자는 시스템 콜이 어떻게구현되는지 알 필요 없다 ,6
106,"개발자는 API를 제대로 사용하고,운영체제가 시스템 콜의 결과로무슨 일을 하는지 알면 된다  ",6
107,운영체제 인터페이스의 자세한내용은 API에 의해 숨겨진다,20
108, 실행시간 지원 시스템(컴파일러에 포함된라이브러리에 내장된 함수의집합)이 운영체제의 시스템콜을 연결해 주는 시스템 콜인터페이스를 제공한다 ,6
109,– OS 관계 ,4
110,시스템 콜 파라미터 전달,6
111, 원하는 시스템 콜 이름 외에 많은 정보가 일반적으로 필요하다,6
112,필요한 정보의 종류와 양은 운영제제와 시스템 콜에 따라 다르다 (* 시스템콜은 일반적인 용어다  시스템 별로 시스템 콜에 해당하는 용어가 있다 ),6
113, 운영체제에 매개변수를 전달하는 세가지 일반적인 방법  가장 간단한 방법: 매개변수를 레지스터에 전달,20
114," 문제는 레지스터 숫자보다 더 많은 매개변수가 있는 경우는레지스터만으로는 부족하다 Calling programSubroutineMove N, R Move M, R Cal",20
115,시스템 콜 파라미터 전달 : 테이블,6
116," 운영체제에 매개변수를 전달하는 세가지 일반적인 방법   매개변수가 메모리에 있는 블록, 테이블에 저장된다 ",20
117, 블록의 메모리 주소가 레지스터에 매개변수로 전달된다 ,20
118, Linux와 Solaris에서 사용하는 방법 ,12
119,시스템 콜 파라미터 전달 : 스택,6
120, 운영체제에 매개변수를 전달하는 세가지 일반적인 방법 ,20
121,  프로그램이 매개변수를 스택에 넣는다,20
122, 운영체제가 스택으로부터 매개변수를 꺼낸다,20
123,블록과 스택 방법은 매개변수 개수나 길이에 제약을 가하지 않는다 ,20
124,시스템 콜 유형  ,16
125,시스템 콜 :  종류,6
126,프로세서 제어,0
127,"프로세스 생성(create process), 프로세스 종료(terminate process)",14
128,"정상적 종료(end), 비정상적 종료(abort)",0
129,"적재(load), 실행(execute)",10
130,"프로세스 속성(attributes) 획득(get), 프로세스 속성 설정(set)",3
131,시간 대기,0
132,"사건 대기(wait event), 사건 알림(signa",0
133,메모리 할당 및 제거(allocate and free memory),0
134,장애 시 메모리 덤프,0
135,"버그 찾는 debugger, 한 단계씩 실행",10
136,프로세스 간에 공유 자료 접근을 관리하는 locks ,0
137,시스템 콜 유형  ,16
138, 파일 관리 (File management),15
139,"파일 생성 (create file), 파일 삭제 (delete file)",15
140,"파일 열기 (open), 파일 닫기 (close file)",15
141,"읽기, 쓰기, 위치 변경 (read, write, reposition)",1
142,파일 속성 획득 및 설정 (get and set file attributes),3
143, 장치 관리 (Device management),3
144,"장치 요청, 장치 방출 (request device, release device)",3
145,"읽기, 쓰기, 위치 변경 (read, write, reposition)",1
146,"장치 속성 획득 및 설정 (get device attributes, set device attributes)",3
147,논리적 장치 부착 및 분리 (logically attach or detach devices) ,0
148,시스템 콜 유형  ,16
149, 정보 관리(Information maintenance),15
150,"시간과 날짜의 설정과 획득(get time or date, set time or date)",3
151,"시스템 데이터의 설정과 획득(get system data, set system data)",3
152,"프로세스, 파일, 장치 속성의 획득과 설정(get and set process, file, or device attributes)",3
153, 통신(Communications),25
154,"통신 연결 생성, 제거",0
155,"메시지의 송신, 수신",0
156,"공유메모리 모델 생성, 메모리 영역 접근",0
157,상태 정보 전달,2
158,원격 장치의 부착(attach) 및 분리(detach) ,0
159,시스템 콜 유형  ,16
160, 보호,19
161,자원 접근을 제어(Contro,0
162, 다중 프로그래밍 시스템,6
163, 네트워킹과 인터넷,1
164,접근 허용 반환 및 설정(Get and set permissions),0
165,사용자 접근 허용 및 거절(Allow and deny user access) ,0
166,윈도우와 UNIX 시스템 콜 ,6
167, C 프로그램이 printf() 호출 ,13
168, 표준 ,4
169,C 라이브러리,3
170,가 write() 시스템 콜 수행,16
171, 단일 태스킹(monoprogramming),3
172, 시스템이 시동될 때 하나의명령해석기 호출,0
173, 하나의 프로그램을 실행하는간단한 방법 제공,10
174,프로세스 생성하지 않는다,14
175, 단일 메모리 공간 (Single memory space),0
176, 커널용 메모리를 제외한 메모리공간을 덮어쓰며 프로그램을 적재,0
177, 프로그램 종료 -> 쉘을 재적재At system startup          running a program ,20
178, UNIX 의 한 종류,0
179, 다중 태스킹(multiprogramming),3
180," 사용자가 로그인할 때, 사용자가 선택한 쉘 (명령해석기)이 실행",0
181, 쉘이 fork() 시스템 콜을 실행하여 프로세스 생성,6
182,Exec()을 실행하여 프로그램을 프로세스에적재함,10
183,쉘은 프로세스 종료를 기다리거나 또는 다른사용자 명령을 수행한다,20
184, 프로세스는 exit() 시스템 콜을 실행하여 종료,6
185,상태 코드   : 정상,1
186,상태 코드   아닌 값 ,1
187, 오류 코드 ,1
188,시스템 프로그램 (System Programs)  ,13
189, 시스템 프로그램(시스템 유틸리티라고도 함)은 프로그램 개발과 실행에편리한 환경을 제공한다  ,6
190,"일부는 시스템 콜에 대한 사용자 인터페이스, 다른 것들은 이보다 훨씬 더복잡하다  ",6
191, 운영체제에 대한 대부분 사용자의 인식은 시스템 콜 보다는 시스템프로그램에 의해 결정된다   ,6
192,시스템 프로그램 (System Programs)  ,13
193, 종류는 아래와 같다,0
194,파일 관리,15
195,상태 정보,2
196,프로그래밍 언어 지원,0
197," (C, C++, Java 등)",8
198,프로그램 적재와 실행,10
199,통신,25
200,백그라운드 서비스 (Background services) ,7
201,시스템 프로그램 (System Programs)  ,13
202, 파일 관리 (File Management) ,15
203,"일반적으로 파일과 디렉토리에 대하여 생성, 삭제, 복사, 개명 (rename), 프린트, 덤프, 리스트 등의 작업을 한다 ",0
204, 상태 정보 (Status Information),2
205,"어떤 프로그램들은 시스템에 날짜, 시간, 가용한 메모리 용량, 디스크용량, 사용자의 수 등을 요청한다  ",0
206,"다른 프로그램들은 자세한 성능, 로깅과 디버깅 정보를 제공한다  ",0
207, 통상 이 프로그램들은 정보를 단말기나 다른 출력 장치 등에 서식을갖추어 인쇄하거나 또는 GUI 윈도우에 표시한다  ,0
208,어떤 시스템은 레지스트리(registry)를 만들어 환경 설정 정보를 저장하고검색한다   ,6
209,시스템 프로그램 (System Programs)  ,13
210, 파일 변경,15
211,파일을 생성하고 수정하는 텍스트 에디터 제공,0
212,파일 내용을 검색하거나 변환하기 위한 특수 명령어 제공,0
213, 프로그래밍 언어 지원,0
214,"컴파일러, 어셈블러, 디버거와 인터프리터 등이 제공된다",0
215, 프로그램 적재와 실행 (p ~ ),10
216,"절대 로더(Absolute loaders), 재배치 가능 로더(relocatable loaders), 링키지 에디터(linkage editors), 중첩 로더(overlay-loaders), 고급언어와기계어를 위한 디버깅 시스템 등이 제공된다",0
217, 통신,25
218,"프로세스, 사용자, 컴퓨터 시스템 간에 가상 접속을 이루기 위한 기법을제공한다",0
219,"다른 사용자 화면에 메시지를 전송하거나, 웹 페이지를 읽거나, 이메일메시지를 보내거나, 원격 로그인하거나, 한 기계에서 다른 기계로 파일전송을 할 수 있게 한다 ",0
220,시스템 프로그램 (System Programs)  ,13
221, 백그라운드 서비스 (Background Service),7
222,부팅 시 살아남,0
223, 일부는 시스템 시작 시 살아나고 끝난다,6
224, 일부는 시스템 시작해서 종료 시까지 살아있다,6
225,"디스크 검사, 프로세스 스케줄링, 예외 기록, 프린트 기능을 제공한다 ",0
226,사용자 모드에서 수행,20
227,"서비스, 서브시스템, 데몬(daemon) 등으로 알려져 있음 ",6
228,운영체제 설계 및 구현,20
229," 운영체제의 설계와 구현에 완전한 해결책은 없지만, 성공적인 접근 방법들이존재한다",20
230, 운영체제 별로 내부 구조는 매우 다르다,20
231, 첫 번째로 목표와 명세를 정의하는 것이다,0
232," 하드웨어와 시스템 타입(일괄처리, 시분할, 단일사용자, 다중 사용자, 분산,실시간 등)의 선택에 따라 다르다",0
233, 사용자 목표와 시스템 목표,22
234,"사용자 목표 – 운영체제는 사용이 편리, 배우기 쉽고, 안정되고, 안전하며신속해야 한다",0
235,"시스템 목표 – 운영체제는 설계, 구현, 유지가 쉬워야 하며, 또한 적응성, 신뢰성, 무오류, 효율성을 가져야 한다 ",6
236,운영체제 설계 및 구현 : 정책과 기법,20
237, 중요한 원칙 : 정책과 메커니즘의 분리,0
238,정책 (Policies):  무엇을 할 것인가?,0
239,기법 (Mechanism):  어떻게 할 것인가?,0
240, 정책과 기법을 분리,0
241,나중에 정책이 변경될 때 최대한의 융통성이 생긴다  ,0
242, 정책은 장소가 바뀌거나 시간의 흐름에 따라 변경될 수 있다 ,0
243, 정책에 민감하지 않은 기법이 바람직하며 정책의 변경은 시스템의 일부매개변수를 재정의할 수 있으면 좋다 ,0
244, 예,5
245,CPU를 계속 점유하는 것을 방지하기 위해 Timer 사용 ( ),0
246,특정 사용자에게 타이머를 얼마나 오랫동안 설정할 것인지 결정 ( ) ,0
247,구현 (Implementation),17
248, 다양성,21
249,초기 운영체제는 어셈블리 언어로 구현,0
250,그 후에 Algol과 PL/ 같은 시스템 프로그래밍 언어 사용,0
251,"현재는 C, C++ 사용",12
252, 실제는 언어를 혼합 사용,0
253,하위 수준은 어셈블리어,0
254,중요 부분은 C,0
255,"시스템 프로그램은 C, C++, PERL, Python과 같은 스크립트 언어",0
256, 고급 언어(High-leve,0
257,Language)로 된 운영체제,20
258,"코드 작성이 빠르며, 간결하고, 이해하기 쉽고 디버그도 쉽다 ",0
259,다른 하드웨어로 이식이 쉽다 (easier to port) ,0
260, Emulation으로 운영체제를 다른 하드웨어에서 수행되는 것도 가능하다 ,20
261,운영체제 구조 (structure),9
262, 범용 운영체제는 매우 큰 프로그램이다,20
263, 다양한 방법으로 운영체제의 구성을 할 수 있다,20
264,간단한 구조 -- MS-DOS,9
265, MS-DOS – 최소의 공간에 최대의기능을 제공하도록 작성,0
266,모듈로 제대로 분할되지 않음,0
267,"MS-DOS가 구조를 갖추고 있지만, 인터페이스와 기능 계층이 잘분리되지 않음",18
268,좀더 복잡한 구조 - UNIX,9
269, 최초의 UNIX,3
270,하드웨어 기능의 제약,20
271,최초 UNIX는 제한적인 구조를 가졌다 ,9
272,UNIX 운영체제는 두 가지 부분으로 분리,0
273, 시스템 프로그램,13
274," 커널(kernel)– 시스템 콜 인터페이스 아래와 물리적 하드웨어 위에 있는 모든 것– 파일 시스템, CPU 스케줄링, 메모리 관리와 다른 운영체제기능들을 제공 : 한 계층에서 많은 기능을 제공함 ",0
275,전통적인 UNIX 시스템 구조 (p )단순하지도 않지만 계층 구조도 없는 형태 ,18
276,계층적 접근 (Layered Approach),18
277," 운영체제는 여러 개의 계층(layer, level)으로 구분",20
278,각 계층은 하위 계층 위에 만들어짐,18
279,최하위(계층  ) 계층은 하드웨어,18
280,최상위 계층(계층 N)은 사용자 인터페이스,18
281," 모듈화 함으로, 각 계층은 하부 계층의 함수(오퍼레이션)와 서비스만을사용한다",0
282,"설계, 구현과 디버깅 간단",0
283, 효율성이 낮다 ,2
284,마이크로 커널 시스템 구조 (Microkerne,9
285, 커널이 커져 관리가 어려워져 가능한 많은 기능을 커널에서 사용자 공간으로옮겨 커널을 최소화,0
286, Mach : 카네기 멜론 대학교에서 개발한 첫 번째 microkerne,0
287,Mac OS X 커널(Darwin)은 부분적으로 Mach에 기초함,0
288, 사용자 모듈 간의 통신은 message passing을 사용한다,0
289, 장점:,1
290,마이크로커널은 확장하기 좋음,0
291,새로운 하드웨어에 이식이 쉽다,0
292,신뢰성 향상 (커널 모드가 작다),0
293,보안성 향상,0
294, 단점,3
295,사용자와 커널 간의 통신으로 인한 성능 오버헤드 ,0
296,마이크로커널 시스템 구조ApplicationProgramFileSystemDeviceDriverusermodemessage passingmessagesmessagesInterprocessCommunicationmemorymanagmentmicrokernelhardwareCPUschedulingkernelmode ,9
297,모듈 (Modules),17
298," 대부분의 현대 운영체제 시스템은 적재 가능한 모듈 (LKM, Loadable Kerne",0
299,Modules)로 구현한다,17
300,객체 지향 기법 사용,0
301,각 핵심 컴포넌트가 분리되어 있음,0
302,각 모듈이 알려진 인터페이스를 사용하여 다른 모듈과 통신,0
303,각 모듈은 필요한 시점에 커널 내에 적재,0
304," 대체로, 계층 구조와 비슷하나 융통성이 있음",18
305,모듈화 방식의 예 : Solaris ,5
306,하이브리드 시스템 (Hybrid Systems),6
307, 대부분의 현대 운영체제는 순수 한가지 모델만을 사용하지 않는다,0
308,"혼용 구조는 여러 기법을 사용하여 성능, 보안, 사용성 요구를 해결한다",0
309," Linux와 Solaris의 커널은 단일구조(monolithic)이지만, 함수의 동적 적재는모듈화 기법을 사용한다",0
310," 윈도우도 대부분이 단일구조이지만, 다른 서브시스템의 특징에 따라마이크로커널을 채택 ",0
311," 애플 Mac OS X는 혼용으로, 계층구조를 사용하고, Aqua 사용자인터페이스와 Cocoa 프로그래밍 환경을 사용한다",0
312,"커널 구성 : Mach 마이크로 커널, BSD Unix 일부, 입출력 도구, 동적 적재모듈인 커널 확장graphica",0
313," iPhone, iPad를 위한 애플 모바일 운영체제",0
314,Mac OS X 커널에 기초한 계층 구조,18
315,OS X 애플리케이션을 네이티브 모드로 지원하지 않는다,0
316, 다른 CPU 구조에서도 실행된다 (ARM 대 Intel),9
317,앱 개발을 위한 Cocoa Touch는 Objective-C를 위한 API,0
318,"그래픽, 오디오, 비디오를 위한 Media services 계층",0
319,Core services가 클라우드 컴퓨팅과 데이터베이스 제공 ,0
320,Android Architecture (구조),9
321, Open Handset Alliance (Google 주도)에서 개발 : 오픈 소스,0
322, IOS와 유사한 계층 구조,18
323, Linux 커널을 기초로 수정,0
324,"프로세스, 메모리, 장치 드라이버 관리 제공, 파워 관리 추가",0
325, 실행환경이 핵심 라이브러리 집합과 Dalvik 가상 머신 포함ApplicationsApplication FrameworkLibrariesAndroid runtimeSQLiteopenGLCore LibrariessurfacemanagermediaframeworkwebkitlibcDalvikvirtua,10
326,운영체제 디버깅 (Operating-System Debugging)n Debugging은 오류나 bugs를 발견하고 고치는 행위이다n 운영체제는 오류 정보를 포함하는 log files 을 생성한다n 애플리케이션이 죽으면 프로세스의 메모리를 캡처한 코어 덤프(core dump)를 생성한다n 운영체제가 죽으면 커널 메모리를 캡처한 비정상 종료 덤프(crash dump)를생성한다n 성능 조정(performance tuning)은 시스템 성능을 최적화한다,0
327,분석을 위해 기록된 시스템 동작의 추적 목록(trace listings)을 사용한다,0
328,통계적인 경향을 찾기 위해 프로파일링(Profiling)은 주기적으로 명령어포인터를 채취한다Kernighan,0
329, 병목 현상을 제거하여 성능을향상시킨다,0
330, 운영체제는 시스템의 행동을계산하고 알려주는 도구를 제공해야한다,0
331," 예로, UNIX의 ",5
332, 프로그램 또는Windows Task Manager ,13
333,운영체제 생성 (Operating System Generation),14
334, 운영체제는 같은 종류의 어떤 기계에서도 수행되도록 설계된다; 운영체제는특정한 컴퓨터 사이트에 대해 구성되어야(configure) 하는데 이 절차를운영체제 생성(System Generation)이라고 한다,20
335, SYSGEN 프로그램은 하드웨어 시스템의 구체적인 구성에 관한 정보를얻는다,6
336,특정한 시스템에 맞추어 컴파일된 커널 또는 튜닝된 시스템을 만드는데사용,6
337,한 개의 일반적인 커널보다 더 효율적인 코드를 생성할 수 있다 ,0
338,시스템 부트 (System Boot),6
339," 시스템에 전기가 들어오면, 고정된 메모리 위치에서 실행이 시작된다",6
340,펌웨어(firmware) ROM(Read Only Memory)이 초기 부팅 코드를 가지고있다,0
341, 운영체제를 하드웨어가 시작할 수 있도록 하드웨어에게 알려야 한다,20
342,ROM 또는 EPROM(Erasable Programmable ROM)에 있는 bootstrap loader라 불리는 작은 코드가 커널을 찾아서 메모리에 적재하고 커널을구동시킨다,0
343,두 단계로 나눠지는 경우도 있음- ROM의 특정한 위치에 있는부트블록(boot block)이 메모리에 로드되고 이것이 디스크에서부트스트랩 로더를 메모리에 적재한다,0
344, GRUB(GRand Unified Bootloader) : Linux 시스템을 위한 오픈소스부트스트랩 프로그램,6
345, 커널이 적재되어 시스템이 실행(running)되게 된다 ,6
